// <auto-generated />
using System;
using Ef_Core_Initial.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Ef_Core_Initial.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ClubStudent", b =>
                {
                    b.Property<int>("ClubsClubId")
                        .HasColumnType("int");

                    b.Property<int>("StudentsStudentId")
                        .HasColumnType("int");

                    b.HasKey("ClubsClubId", "StudentsStudentId");

                    b.HasIndex("StudentsStudentId");

                    b.ToTable("ClubStudent");
                });

            modelBuilder.Entity("Ef_Core_Initial.Data.Entities.Club", b =>
                {
                    b.Property<int>("ClubId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClubId"));

                    b.Property<string>("ClubDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClubName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ClubId");

                    b.ToTable("Clubs");

                    b.HasData(
                        new
                        {
                            ClubId = 1,
                            ClubDescription = "Yazılım çok keyifli",
                            ClubName = "Yazılım",
                            CreateDate = new DateTime(2024, 12, 15, 13, 0, 15, 861, DateTimeKind.Local).AddTicks(6174),
                            UpdateDate = new DateTime(2024, 12, 15, 13, 0, 15, 861, DateTimeKind.Local).AddTicks(6189)
                        },
                        new
                        {
                            ClubId = 2,
                            ClubDescription = "Kitap okumak çok keyifli",
                            ClubName = "Kitap",
                            CreateDate = new DateTime(2024, 12, 15, 13, 0, 15, 861, DateTimeKind.Local).AddTicks(6191),
                            UpdateDate = new DateTime(2024, 12, 15, 13, 0, 15, 861, DateTimeKind.Local).AddTicks(6193)
                        });
                });

            modelBuilder.Entity("Ef_Core_Initial.Data.Entities.Field", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Fields");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Sayısal"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Eşit Ağırlık"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Sözel"
                        });
                });

            modelBuilder.Entity("Ef_Core_Initial.Data.Entities.Identity", b =>
                {
                    b.Property<int>("IdentityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdentityId"));

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("IdentityId");

                    b.HasIndex("StudentId")
                        .IsUnique();

                    b.ToTable("Identities");

                    b.HasData(
                        new
                        {
                            IdentityId = 1,
                            CardNumber = "e18341fa-d83e-4411-88a2-35b1710deaa1",
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentId = 1,
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            IdentityId = 2,
                            CardNumber = "f9ab06e2-ea2c-4197-9d73-964ea63dfb0b",
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentId = 2,
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            IdentityId = 3,
                            CardNumber = "b3af48c2-58af-45d4-8e76-feb592bebc29",
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentId = 3,
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Ef_Core_Initial.Data.Entities.Lesson", b =>
                {
                    b.Property<int>("LessonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LessonId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LessonCreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LessonName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("LessonId");

                    b.ToTable("Lessons");

                    b.HasData(
                        new
                        {
                            LessonId = 1,
                            CreateDate = new DateTime(2024, 12, 15, 13, 0, 15, 861, DateTimeKind.Local).AddTicks(6516),
                            LessonCreateDate = new DateTime(2024, 12, 15, 13, 0, 15, 861, DateTimeKind.Local).AddTicks(6512),
                            LessonName = "Matematik",
                            UpdateDate = new DateTime(2024, 12, 15, 13, 0, 15, 861, DateTimeKind.Local).AddTicks(6515)
                        });
                });

            modelBuilder.Entity("Ef_Core_Initial.Data.Entities.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentId"));

                    b.Property<DateTime>("Birthdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("FieldId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Soyisim");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("StudentId");

                    b.HasIndex("FieldId");

                    b.ToTable("MyStudents", (string)null);

                    b.HasData(
                        new
                        {
                            StudentId = 1,
                            Birthdate = new DateTime(2024, 12, 15, 13, 0, 15, 861, DateTimeKind.Local).AddTicks(6459),
                            CreateDate = new DateTime(2024, 12, 15, 13, 0, 15, 861, DateTimeKind.Local).AddTicks(6460),
                            FieldId = 1,
                            Name = "Tarık",
                            Surname = "Hamarat",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            StudentId = 2,
                            Birthdate = new DateTime(2024, 12, 15, 13, 0, 15, 861, DateTimeKind.Local).AddTicks(6463),
                            CreateDate = new DateTime(2024, 12, 15, 13, 0, 15, 861, DateTimeKind.Local).AddTicks(6464),
                            FieldId = 2,
                            Name = "Ömer",
                            Surname = "Şahin",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            StudentId = 3,
                            Birthdate = new DateTime(2024, 12, 15, 13, 0, 15, 861, DateTimeKind.Local).AddTicks(6466),
                            CreateDate = new DateTime(2024, 12, 15, 13, 0, 15, 861, DateTimeKind.Local).AddTicks(6468),
                            FieldId = 3,
                            Name = "Yusuf",
                            Surname = "Ergin",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            StudentId = 4,
                            Birthdate = new DateTime(2024, 12, 15, 13, 0, 15, 861, DateTimeKind.Local).AddTicks(6470),
                            CreateDate = new DateTime(2024, 12, 15, 13, 0, 15, 861, DateTimeKind.Local).AddTicks(6471),
                            FieldId = 1,
                            Name = "Duhan",
                            Surname = "Göksal",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Ef_Core_Initial.Data.Entities.StudentLesson", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("StudentId", "LessonId");

                    b.HasIndex("LessonId");

                    b.ToTable("StudentLessons");

                    b.HasData(
                        new
                        {
                            StudentId = 1,
                            LessonId = 1,
                            CreateDate = new DateTime(2024, 12, 15, 13, 0, 15, 861, DateTimeKind.Local).AddTicks(6554),
                            UpdateDate = new DateTime(2024, 12, 15, 13, 0, 15, 861, DateTimeKind.Local).AddTicks(6553)
                        });
                });

            modelBuilder.Entity("ClubStudent", b =>
                {
                    b.HasOne("Ef_Core_Initial.Data.Entities.Club", null)
                        .WithMany()
                        .HasForeignKey("ClubsClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ef_Core_Initial.Data.Entities.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsStudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ef_Core_Initial.Data.Entities.Identity", b =>
                {
                    b.HasOne("Ef_Core_Initial.Data.Entities.Student", "Student")
                        .WithOne("Identity")
                        .HasForeignKey("Ef_Core_Initial.Data.Entities.Identity", "StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Ef_Core_Initial.Data.Entities.Student", b =>
                {
                    b.HasOne("Ef_Core_Initial.Data.Entities.Field", "Field")
                        .WithMany("Students")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Field");
                });

            modelBuilder.Entity("Ef_Core_Initial.Data.Entities.StudentLesson", b =>
                {
                    b.HasOne("Ef_Core_Initial.Data.Entities.Lesson", "Lesson")
                        .WithMany("StudentLessons")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ef_Core_Initial.Data.Entities.Student", "Student")
                        .WithMany("StudentLessons")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Ef_Core_Initial.Data.Entities.Field", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("Ef_Core_Initial.Data.Entities.Lesson", b =>
                {
                    b.Navigation("StudentLessons");
                });

            modelBuilder.Entity("Ef_Core_Initial.Data.Entities.Student", b =>
                {
                    b.Navigation("Identity")
                        .IsRequired();

                    b.Navigation("StudentLessons");
                });
#pragma warning restore 612, 618
        }
    }
}
